{
    "contents" : "########################################################################\n#Function Effects\n########################################################################\n\n\nEffects<-function(response, factors,  effect = c(\"unweighted\", \n                                                 \"weighted\")) \n{\n  \n  effect <- match.arg(effect)\n  factorx <- factors\n  samples <- split(response, factorx)\n  fl <- levels(factorx)\n  a <- nlevels(factorx)\n  n <- sapply(samples,length)\n  N <- sum(n)\n  tmp1 <- sort(rep(1:a, a))\n  tmp2 <- rep(1:a, a)\n  \n  p <- sapply(1:(a^2), function(arg) {\n    x1 <- samples[[tmp1[arg]]]\n    x2 <- samples[[tmp2[arg]]]\n    rx1x2 <- rank(c(x1, x2))\n    l1 <- length(x1)\n    l2 <- length(x2)\n    1/(l1 + l2) * (mean(rx1x2[(l1 + 1):(l1 + l2)]) - mean(rx1x2[1:l1])) + \n      0.5\n  })\n  \n  intRanks <- lapply(samples, rank)\n  \n  V <- rep(0, a^4)\n  help <- expand.grid(1:a, 1:a, 1:a, 1:a)\n  h1 <- help[, 4]\n  h2 <- help[, 3]\n  h3 <- help[, 2]\n  h4 <- help[, 1]\n  for (u in 1:(a^4)) {\n    i <- h1[u]\n    j <- h2[u]\n    r <- h3[u]\n    s <- h4[u]\n    if (i == r && j == s && i != j && r != s) {\n      xi <- samples[[i]]\n      xj <- samples[[j]]\n      ni <- length(xi)\n      nj <- length(xj)\n      ri <- rank(xi)\n      rj <- rank(xj)\n      rij <- rank(c(xi, xj))\n      pj <- 1/ni * (rij[(ni + 1):(ni + nj)] - rj)\n      pi <- 1/nj * (rij[1:ni] - ri)\n      vi <- var(pi)/ni\n      vj <- var(pj)/nj\n      V[u] <- N * (vi + vj)\n    }\n    if (i == s && j == r && i != j && r != s) {\n      xi <- samples[[i]]\n      xj <- samples[[j]]\n      ni <- length(xi)\n      nj <- length(xj)\n      ri <- rank(xi)\n      rj <- rank(xj)\n      rij <- rank(c(xi, xj))\n      pj <- 1/ni * (rij[(ni + 1):(ni + nj)] - rj)\n      pi <- 1/nj * (rij[1:ni] - ri)\n      vi <- var(pi)/ni\n      vj <- var(pj)/nj\n      V[u] <- -N * (vi + vj)\n    }\n    if (i == r && j != s && i != j && r != s) {\n      xi <- samples[[i]]\n      xj <- samples[[j]]\n      xs <- samples[[s]]\n      ni <- length(xi)\n      nj <- length(xj)\n      ns <- length(xs)\n      ri <- rank(xi)\n      rj <- rank(xj)\n      rs <- rank(xs)\n      rij <- rank(c(xi, xj))\n      ris <- rank(c(xi, xs))\n      pij <- 1/nj * (rij[1:ni] - ri)\n      pis <- 1/ns * (ris[1:ni] - ri)\n      V[u] <- N * (cov(pij, pis)/ni)\n    }\n    if (i != r && j == s && i != j && r != s) {\n      xi <- samples[[i]]\n      xj <- samples[[j]]\n      xr <- samples[[r]]\n      ni <- length(xi)\n      nj <- length(xj)\n      nr <- length(xr)\n      ri <- rank(xi)\n      rj <- rank(xj)\n      rr <- rank(xr)\n      rji <- rank(c(xj, xi))\n      rjr <- rank(c(xj, xr))\n      pji <- 1/ni * (rji[1:nj] - rj)\n      prj <- 1/nr * (rjr[1:nj] - rj)\n      V[u] <- N * (cov(pji, prj)/nj)\n    }\n    if (i == s && j != r && i != j && r != s) {\n      xi <- samples[[i]]\n      xj <- samples[[j]]\n      xr <- samples[[r]]\n      ni <- length(xi)\n      nj <- length(xj)\n      nr <- length(xr)\n      ri <- rank(xi)\n      rj <- rank(xj)\n      rr <- rank(xr)\n      rij <- rank(c(xi, xj))\n      rir <- rank(c(xi, xr))\n      pij <- 1/nj * (rij[1:ni] - ri)\n      pir <- 1/nr * (rir[1:ni] - ri)\n      V[u] <- -N * (cov(pij, pir)/ni)\n    }\n    if (i != s && j == r && i != j && r != s) {\n      xi <- samples[[i]]\n      xj <- samples[[j]]\n      xs <- samples[[s]]\n      ni <- length(xi)\n      nj <- length(xj)\n      ns <- length(xs)\n      ri <- rank(xi)\n      rj <- rank(xj)\n      rs <- rank(xs)\n      rji <- rank(c(xj, xi))\n      rjs <- rank(c(xj, xs))\n      pji <- 1/ni * (rji[1:nj] - rj)\n      pjs <- 1/ns * (rjs[1:nj] - rj)\n      V[u] <- -N * (cov(pji, pjs)/nj)\n    }\n  }\n  V1 <- matrix(V, ncol = a^2, nrow = a^2)\n  switch(effect, weighted = {\n    W <- kronecker(t(n/N), diag(a))\n    samplesR <- split(rank(response), factorx)\n    varsF <- sapply(samplesR,var)\n    VH0F = diag(varsF/(n*N^2))\n    Si2 = unlist(lapply(1:a,function(arg) var(samplesR[[arg]]-intRanks[[arg]])))\n    dfBF = (sum(Si2/(N-n)))^2 / sum((Si2/(N-n))^2/(n-1)) #(sum(Si2[[arg]]/N-n[arg]))^2 / (sum((Si2[[arg]]/(N-n[arg]))^2 / (n[arg]-1))))\n    text.output.W <- paste(\"Global Ranks\")\n  }, \n  unweighted = {\n    W <- kronecker(t(rep(1/a, a)), diag(a))\n    samplesR = lapply(1:a,function(arg){\n      helpmat=rbind(1:a,matrix(1:a,nrow=a,ncol=a))\n      x1 <- samples[[helpmat[1,arg]]]\n      help=0\n      for(j in 1:a){\n        x2 <- samples[[helpmat[j+1,arg]]]\n        help=help+1/length(x2)*(rank(c(x1,x2))[1:length(x1)] - rank(x1))\n      }\n      N/a*help+1/2\n\n})\n    \n    varsF <- sapply(samplesR,var)\n    VH0F = diag(varsF/(n*N^2))\n    Si2 = unlist(lapply(1:a,function(arg) var(samplesR[[arg]]-intRanks[[arg]])))\n    dfBF = (sum(Si2/(N-n)))^2 / sum((Si2/(N-n))^2/(n-1)) #(sum(Si2[[arg]]/N-n[arg]))^2 / (sum((Si2[[arg]]/(N-n[arg]))^2 / (n[arg]-1))))\n    text.output.W <- paste(\"Global Pseudo Ranks\")\n    \n    \n  })\n  \n  pd = W%*%p\n  VV=W%*%V1%*%t(W)\n  \n  \n  result <- list(pd=pd, VH0F=VH0F,VBF=VV, N=N, n=n,dfATS=dfBF)\n  return(result)\n}\n\n###################################################################\n# Function for Confidence Limits\n###################################################################\n\nLimits <- function(p,V,alpha,N){\n  \n  \n  L <- p - qnorm(1-alpha/2)/sqrt(N)*sqrt(c(diag(V)))\n  U <- p + qnorm(1-alpha/2)/sqrt(N)*sqrt(c(diag(V)))\n  \n  Psi <- diag(1/(p*(1-p)))\n  VLogit <- Psi%*%V%*%t(Psi)\n  Llogit <- expit(logit(p)- qnorm(1-alpha/2)/sqrt(N)*sqrt(c(diag(VLogit))))\n  Ulogit <- expit(logit(p)+ qnorm(1-alpha/2)/sqrt(N)*sqrt(c(diag(VLogit))))\n  \n  res=list(Normal=cbind(L,U), Logit= cbind(Llogit,Ulogit))\n  return(res)\n}\n\n#################################################################\n#Wald Type Statistics\n#################################################################\nWald <- function(M,H,V){\n  WTS = t(H%*%M)%*%ginv(H%*%V%*%t(H))%*%H%*%M\n  dfWTS = rankMatrix(H)[1]\n  pv.WTS = 1-pchisq(WTS,dfWTS)\n  res.WTS = c(WTS,dfWTS,pv.WTS)\n  return(res.WTS)\n}\n\n#################################################################\n#ANOVA Type Statistics\n#################################################################\n\nANOVATYP <- function(M,H,V,n){\n  \n  C <- t(H)%*%ginv(H%*%t(H))%*%H\n  spur <- sum(diag(C%*%V))\n  D <- diag(C)*diag(ncol(C))\n  Lambda <- diag(1/(n-1))\n  ATS <- 1/spur*t(M)%*%C%*%M\n  df_ATS1 <- spur^2/sum(diag(C%*%V%*%C%*%V))\n  df_ATS2 <- spur^2/sum(diag(D%*%D%*%V%*%V%*%Lambda))\n  \n  pv.ATS <- 1-pf(ATS, df_ATS1, df_ATS2)\n  res <- c(ATS, df_ATS1, df_ATS2, pv.ATS)\n  return(res)\n}\n\nANOVATYPH0P <- function(M,H,V,n,df){\n  C <- t(H)%*%ginv(H%*%t(H))%*%H\n  spur <- sum(diag(C%*%V))\n  ATS <- sum(n)/spur*t(M)%*%C%*%M\n  df_ATS1 <- spur^2/sum(diag(C%*%V%*%C%*%V))\n  pv.ATS <- 1-pf(ATS, df_ATS1, df)\n  res <- c(ATS, df_ATS1, df, pv.ATS)\n  return(res)\n}\n\n#################################################################\n#Logit Transformation\n#################################################################\n\nlogit <- function(p){\n  return(log(p/(1-p)))}\nexpit<-function(p){return(exp(p)/(1+exp(p)))}\n\n################################################################\n# for twosample problems\n################################################################\n\nwilcoxontests <- function(x,y){\n  n1 = length(x)\n  n2 = length(y)\n  N=n1+n2\n  \n  rxy = rank(c(x,y))\n  rx=rxy[1:n1]\n  ry=rxy[(n1+1):N]\n  W=sqrt(n1*n2/N)*(mean(ry)-mean(rx))/sd(rxy)\n  \n  erg=data.frame(W=W, pV2=min(2*pnorm(W),2-2*pnorm(W)),pV.L=pnorm(W),pV.U=1-pnorm(W))\n  erg\n}\n\n\nBMstat = function(x,y,nx,ny){\n  Nxy = nx + ny\n  xy = c(x,y)\n  rxy = rank(xy)\n  rx = rank(x)\n  ry= rank(y)\n  plx = 1/ny*(rxy[1:nx]-rx)\n  ply = 1/nx*(rxy[(nx+1):(Nxy)] -ry)\n  vx = Nxy*(var(plx)/nx + var(ply)/ny)\n  pd=mean(ply)\n  pd0=(pd==0)\n  pd1 = (pd==1)\n  pd[pd0] = (1/(2*nx))/ny\n  pd[pd1] = (nx-1/(2*ny))/nx\n  vx0= (vx==0)\n  vx[vx0] = Nxy/(2*nx^2*ny^2)\n  T = sqrt(Nxy)*(pd-1/2)/sqrt(vx)\n  \n  #-------------Logit----------------#\n  slogit=(1/(pd*(1-pd))*sqrt(vx))\n  Tlogit = sqrt(Nxy)*logit(pd)/(slogit)\n  \n  #------------Probit-----------------#\n  sprobit=sqrt(2*pi)/(exp(-1/2*(qnorm(pd))^2))*sqrt(vx)\n  Tprobit = sqrt(Nxy) * qnorm(pd)/(sprobit)\n  \n  erg=data.frame(T=T, Logit=Tlogit,Probit=Tprobit, sdx=vx, slogit=slogit, sprobit=sprobit)\n  erg\n}\n\n\n\n",
    "created" : 1461739747624.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1634252417",
    "id" : "F639AD3B",
    "lastKnownWriteTime" : 1465216149,
    "path" : "~/Dropbox/rankFD/rankFD/R/Statistics.R",
    "project_path" : "R/Statistics.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}